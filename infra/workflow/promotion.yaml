# First, install Argo Workflows if not already installed
# workflows/promotion-workflow.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: promotion-workflow
  namespace: argo
spec:
  serviceAccountName: workflow-runner
  entrypoint: promote
  arguments:
    parameters:
    - name: image-tag
      description: "The image tag to promote"
    - name: git-repo
      description: "Git repository URL"
      default: "https://github.com/prashantsharma18/enterprise-demo.git"
    - name: git-branch
      description: "Git branch"
      default: "main"
  
  templates:
  - name: promote
    dag:
      tasks:
      - name: deploy-to-dev
        template: update-manifestapiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: promotion-workflow
  namespace: argo
spec:
  serviceAccountName: workflow-runner
  entrypoint: promote
  arguments:
    parameters:
    - name: image-tag
      description: "The image tag to promote"
    - name: git-repo
      description: "Git repository URL"
      default: "https://github.com/prashantsharma18/enterprise-demo.git"
    - name: git-branch
      description: "Git branch"
      default: "main"
  
  templates:
  - name: promote
    dag:
      tasks:
      - name: deploy-to-dev
        template: update-manifest
        arguments:
          parameters:
          - name: env
            value: dev
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: verify-preview
        dependencies: [deploy-to-dev]
        template: verify-preview
        arguments:
          parameters:
          - name: env
            value: dev

      - name: manual-approval
        dependencies: [verify-preview]
        template: approve

      - name: promote-to-active
        dependencies: [manual-approval]
        template: promote-rollout
        arguments:
          parameters:
          - name: env
            value: dev

  # Your existing update-manifest template remains same...

  - name: verify-preview
    inputs:
      parameters:
      - name: env
    script:
      image: alpine:3.18
      command: [sh]
      source: |
        set -e
        
        # Install required tools
        apk add --no-cache curl bash git

        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/

        # Install argo rollouts plugin
        curl -sL https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64 -o /usr/local/bin/kubectl-argo-rollouts
        chmod +x /usr/local/bin/kubectl-argo-rollouts
        
        echo "Waiting for preview service to be ready..."
        kubectl argo rollouts get rollout enterprise-demo -n {{inputs.parameters.env}} --watch=false
        
        # Verify the preview service is available
        if ! kubectl get svc enterprise-demo-preview -n {{inputs.parameters.env}}; then
          echo "Preview service not found"
          exit 1
        fi

  - name: approve
    suspend: {}

  - name: promote-rollout
    inputs:
      parameters:
      - name: env
    script:
      image: alpine:3.18
      command: [sh]
      source: |
        set -e
        
        # Install required tools
        apk add --no-cache curl bash git

        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/

        # Install argo rollouts plugin
        curl -sL https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64 -o /usr/local/bin/kubectl-argo-rollouts
        chmod +x /usr/local/bin/kubectl-argo-rollouts
        
        echo "Promoting rollout..."
        kubectl argo rollouts promote enterprise-demo -n {{inputs.parameters.env}}
        
        echo "Waiting for promotion to complete..."
        kubectl argo rollouts get rollout enterprise-demo -n {{inputs.parameters.env}} --watch

# ConfigMap for workflow configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promotion-config
  namespace: argo
data:
  verify-timeout: "300"
  success-rate-threshold: "0.95"
  health-check-endpoint: "/health"

# Create a ServiceAccount and RBAC for the workflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promotion-workflow
  namespace: argo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promotion-workflow-role
rules:
- apiGroups: ["argoproj.io"]
  resources: ["rollouts", "rollouts/status"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["services", "pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promotion-workflow-binding
subjects:
- kind: ServiceAccount
  name: promotion-workflow
  namespace: argo
roleRef:
  kind: ClusterRole
  name: promotion-workflow-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflow-runner
  namespace: argo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: workflow-role
  namespace: argo
rules:
- apiGroups: ["argoproj.io"]
  resources:
  - workflows
  - workflowtasksets
  - workflowtaskresults
  - workflowtemplates
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workflow-rolebinding
  namespace: argo
subjects:
- kind: ServiceAccount
  name: workflow-runner
  namespace: argo
roleRef:
  kind: Role
  name: workflow-role
  apiGroup: rbac.authorization.k8s.io