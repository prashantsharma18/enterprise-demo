# First, install Argo Workflows if not already installed
# workflows/promotion-workflow.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: promotion-workflow
  namespace: argo
spec:
  serviceAccountName: workflow-runner
  entrypoint: promote
  arguments:
    parameters:
    - name: image-tag
      description: "The image tag to promote"
    - name: git-repo
      description: "Git repository URL"
      default: "https://github.com/prashantsharma18/enterprise-demo.git"
    - name: git-branch
      description: "Git branch"
      default: "main"
  
  templates:
  - name: promote
    dag:
      tasks:
      - name: deploy-to-dev
        template: update-manifest
        arguments:
          parameters:
          - name: env
            value: dev
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: verify-dev
        dependencies: [deploy-to-dev]
        template: verify-deployment
        arguments:
          parameters:
          - name: env
            value: dev
      
      - name: deploy-to-staging
        dependencies: [verify-dev]
        template: update-manifest
        arguments:
          parameters:
          - name: env
            value: staging
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: verify-staging
        dependencies: [deploy-to-staging]
        template: verify-deployment
        arguments:
          parameters:
          - name: env
            value: staging
      
      - name: deploy-to-prod
        dependencies: [verify-staging]
        template: update-manifest
        arguments:
          parameters:
          - name: env
            value: production
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: verify-prod
        dependencies: [deploy-to-prod]
        template: verify-deployment
        arguments:
          parameters:
          - name: env
            value: production

  - name: update-manifest
    inputs:
      parameters:
      - name: env
      - name: image-tag
    script:
      image: bitnami/git:latest
      command: [bash]
      env:
        - name: GIT_SSH_COMMAND
          value: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
      volumeMounts:
        - name: ssh-key
          mountPath: /ssh-secrets
          readOnly: true
        - name: workspace
          mountPath: /root/.ssh
      source: |
        #!/bin/bash
        set -ex
        
        # Create SSH directory with correct permissions
        mkdir -p /root/.ssh
        cp /ssh-secrets/ssh-privatekey /root/.ssh/id_rsa
        chmod 700 /root/.ssh
        chmod 400 /root/.ssh/id_rsa
        
        # Configure Git
        git config --global user.email "argo@workflow.local"
        git config --global user.name "Argo Workflow"

        # Clone repository
        REPO_URL="git@github.com:prashantsharma18/enterprise-demo.git"
        git clone --depth 1 -b {{workflow.parameters.git-branch}} "${REPO_URL}" repo
        
        cd repo/infra/k8s/overlays/{{inputs.parameters.env}}
        
        # Update manifest
        sed -i "s|newTag:.*|newTag: {{inputs.parameters.image-tag}}|g" kustomization.yaml
        
        # Commit and push changes
        git add kustomization.yaml
        git commit -m "Update {{inputs.parameters.env}} to {{inputs.parameters.image-tag}}"
        git push origin {{workflow.parameters.git-branch}}
    volumes:
    - name: ssh-key
      secret:
        secretName: git-ssh-key
        defaultMode: 0400
    - name: workspace
      emptyDir: {}

  - name: verify-deployment
    inputs:
      parameters:
      - name: env
    script:
      image: bitnami/kubectl
      command: [bash]
      source: |
        set -e
        
        # Wait for ArgoCD sync
        argocd app wait enterprise-demo-{{inputs.parameters.env}} --health --timeout 300
        
        # Wait for rollout
        kubectl argo rollouts get rollout enterprise-demo -n {{inputs.parameters.env}} --watch
        
        # Verify metrics (example)
        success_rate=$(curl -s http://prometheus:9090/api/v1/query?query=sum(rate(http_requests_total{status="200",env="{{inputs.parameters.env}}"}[5m]))/sum(rate(http_requests_total{env="{{inputs.parameters.env}}"}[5m])))
        
        if (( $(echo "$success_rate < 0.95" | bc -l) )); then
          echo "Success rate below threshold: $success_rate"
          exit 1
        fi
        
        # Promote the rollout
        kubectl argo rollouts promote enterprise-demo -n {{inputs.parameters.env}}

# ConfigMap for workflow configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promotion-config
  namespace: argo
data:
  verify-timeout: "300"
  success-rate-threshold: "0.95"
  health-check-endpoint: "/health"

# Create a ServiceAccount and RBAC for the workflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promotion-workflow
  namespace: argo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promotion-workflow-role
rules:
- apiGroups: ["argoproj.io"]
  resources: ["rollouts", "rollouts/status"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["services", "pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promotion-workflow-binding
subjects:
- kind: ServiceAccount
  name: promotion-workflow
  namespace: argo
roleRef:
  kind: ClusterRole
  name: promotion-workflow-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflow-runner
  namespace: argo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: workflow-role
  namespace: argo
rules:
- apiGroups: ["argoproj.io"]
  resources:
  - workflows
  - workflowtasksets
  - workflowtaskresults
  - workflowtemplates
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workflow-rolebinding
  namespace: argo
subjects:
- kind: ServiceAccount
  name: workflow-runner
  namespace: argo
roleRef:
  kind: Role
  name: workflow-role
  apiGroup: rbac.authorization.k8s.io