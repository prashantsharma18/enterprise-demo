# Prerequisites Installation

# 1. Install Kind
brew install kind

# 2. Install Helm
brew install helm

# 3. Install kubectl
brew install kubectl

# 4. Install Argo CLI
brew install argocd
brew install argo

# Create Kind Cluster
kind create cluster --name argo-demo --config kind-config.yaml

# Create Namespaces
kubectl create namespace argocd
kubectl create namespace argo

# Install ArgoCD using Helm
helm repo add argo https://argoproj.github.io/argo-helm
helm repo update

# Install ArgoCD
helm install argocd argo/argo-cd \
  --namespace argocd \
  --set server.service.type=NodePort \
  --set server.service.nodePort=30007

# Install Argo Workflows
helm install argo-workflows argo/argo-workflows \
  --namespace argo \
  --set server.serviceType=NodePort \
  --set server.serviceNodePort=30009

kubectl patch deployment argo-workflows-server -n argo --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--auth-mode=server"}]'
kubectl get secret argo-admin.service-account-token -n argo -o jsonpath='{.data.token}' | base64 --decode

# Install Argo Rollouts
helm install argo-rollouts argo/argo-rollouts \
  --namespace argo-rollouts \
  --set dashboard.enabled=true \
  --set dashboard.service.type=ClusterIP

# Get ArgoCD admin password
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
kubectl create secret generic git-creds -n argo --from-literal=username=prashantsharma18 --from-literal=password=

# Use port-forwarding instead
kubectl port-forward svc/argocd-server -n argocd 8080:443



Authentication Setup:
bashCopy# The username is your GitHub username
USERNAME=your-github-username
For the password/token:

Go to GitHub.com → Your Profile → Settings
Navigate to "Developer settings" → "Personal access tokens" → "Tokens (classic)"
Click "Generate new token (classic)"
Select scopes:

write:packages
read:packages
delete:packages
repo (for private repositories)

# Login to GHCR for testing in local
docker login ghcr.io -u YOUR_GITHUB_USERNAME -p YOUR_PERSONAL_ACCESS_TOKEN

# Pull your image (after pipeline succeeds)
docker pull ghcr.io/YOUR_GITHUB_USERNAME/enterprise-demo:latest


ssh-keygen -t ed25519 -C "argo@workflow.local" -f deploy_key 
kubectl create secret generic git-ssh-key --from-file=ssh-privatekey=deploy_key -n argo




kubectl patch configmap argocd-cm -n argocd --type merge -p '
{
  "data": {
    "accounts.workflow-automation": "apiKey"
  }
}'

---
